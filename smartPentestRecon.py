import asyncio
import uuid
import logging
import os
import subprocess

from openai.types.responses import ResponseContentPartDoneEvent, ResponseTextDeltaEvent

from agents import Agent, ItemHelpers, MessageOutputItem, RawResponsesStreamEvent, Runner, TResponseInputItem, trace, function_tool

@function_tool
def nmapScan(url: str, nmapCommandOnOneLine: str) -> str:
    process = subprocess.Popen(
        nmapCommandOnOneLine,
        shell=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True
    )

    output_lines = []

    for line in iter(process.stdout.readline, ''):
        print(line, end='')
        output_lines.append(line)

    process.stdout.close()
    process.wait()  

    return ''.join(output_lines)


@function_tool
def niktoScan(url: str, niktoCommandOnOneLine: str) -> str:
    process = subprocess.Popen(
        niktoCommandOnOneLine,
        shell=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True
    )

    output_lines = []

    for line in iter(process.stdout.readline, ''):
        print(line, end='')
        output_lines.append(line)

    process.stdout.close()
    process.wait()  

    return ''.join(output_lines)



@function_tool
def wpScan(url: str, wpCommandOnOneLine: str) -> str:
    process = subprocess.Popen(
        wpCommandOnOneLine,
        shell=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True
    )

    output_lines = []

    for line in iter(process.stdout.readline, ''):
        print(line, end='')
        output_lines.append(line)

    process.stdout.close()
    process.wait()  

    return ''.join(output_lines)



reportAgent = Agent(
    name="reportAgent",
    instructions=(
        "Your task is to make an raport with the information from all the different type of scans."
        "You have to give a brief description of every found vulnerability. You dont have to give poc or any type of way to exploit or test or fix it."
        "Make it in markdown."
    ), 
    handoff_description="The step after scan",
)


scanAgent = Agent(
    name="scanAgent",
    instructions=(
        "Your task is to run all the scans on the given url. When nessecery run a scan again."
        "If you suspect from the nikto and nmap scan that it is a wordpress webapp than you can do a wp"
        "After you're done handoff to the budleAgent"
    ),
    #tools=[nmapScan],
    tools=[niktoScan, wpScan, nmapScan],
    handoffs=[reportAgent],
)



triageAgent = Agent(
    name="triageAgent",
    instructions=(
        "You are the main agent. You use the tools given to you to perform all the actions."
        "You call the tools in the correct order."
        "You never do any tasks on your own, you always use the provided tools."
    )
    #tools=
)




async def main():
    url = input("url: ")
    
    with trace("scan Agent"):
        scanOutput = await Runner.run(scanAgent, url)
        
        for item in scanOutput.new_items:
            if isinstance(item, MessageOutputItem):
                text = ItemHelpers.text_message_output(item)
                if text:
                    print(f"  - Program step: {text}")

if __name__ == "__main__":
    asyncio.run(main())